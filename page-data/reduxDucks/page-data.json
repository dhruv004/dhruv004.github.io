{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/reduxDucks/","result":{"data":{"markdownRemark":{"html":"<h2>Context</h2>\n<p>This blog is about structuring redux state management in your application with ducks pattern\nThis was initially introduced to me by one of my colleague.And since then I have started loving it.You can read more about the ducks pattern proposal <a href=\"https://github.com/erikras/ducks-modular-redux\">here</a></p>\n<h2>Pre requisites</h2>\n<p>This blog is for developers who have already worked with redux. <br />\nThe code used can be found <a href=\"https://github.com/dhruv004/redux-ducks-comparison\">here</a>, it uses redux with typescript</p>\n<h2>In the Beginning</h2>\n<p>State management with Redux requires you to keep adding <code class=\"language-text\">{actionTypes, actions, reducers}</code> for state.</p>\n<p>This is what my typical redux folder looked <a href=\"https://github.com/dhruv004/redux-ducks-comparison/tree/main/without-ducks\">like</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n+-- action-types.ts\n+-- store.ts\n+-- actions\n|   +-- user-actions.ts\n|   +-- todo-actions.ts\n+-- reducers\n|   +-- root-reducer.ts\n|   +-- user-reducer.ts\n|   +-- todo-reducer.ts</code></pre></div>\n<br/>\n<h2>The problems caused by this</h2>\n<ol>\n<li>Logic for a model/redux state is divided into multiple places</li>\n<li>Overhead of maintaining multiple files</li>\n<li>Makes it difficult to follow the flow, when calling action from a react component</li>\n</ol>\n<h2>Implementation with redux ducks</h2>\n<p>With ducks implementation the same could look <a href=\"https://github.com/dhruv004/redux-ducks-comparison/tree/main/with-ducks\">like this</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n+-- action-types.ts\n+-- store.ts\n+-- state.ts\n+-- reducer.ts\n+-- ducks\n|   +-- user.ts\n|   +-- todo.ts</code></pre></div>\n<br />\n<h2>What I Liked</h2>\n<ol>\n<li>Merged the logic of a model/redux state of actions and reducer into a single duck file based on the model name.Now the logic of a model is all at on place</li>\n<li>As a rule, no ducks share any imports from each other.These should only contain atomic units, which can then be used to build.This is important for consistency</li>\n<li>\n<p>Better flow visibility from the component: Sometimes you may need to update multiple ducks on an action.To solve this we created a new folder called thunks, and this method method is then called called from the component instead of the ducks</p>\n<p>A sample <a href=\"https://github.com/dhruv004/redux-ducks-comparison/blob/eecd46c44d1e0a4fc4d6906e7681f192bd4bc104/with-ducks/thunks/set-user-todos.ts#L5\">thunk</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> doLogin <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../ducks/user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fetchTodos <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../ducks/todo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GlobalState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../state\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setUserTodos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> userName<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token operator\">:</span> ThunkDispatchType<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">getState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> GlobalState<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">doLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> userName<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> <span class=\"token function\">fetchTodos</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For react components updating the state like this highly increases the visibility of what all the action could do.In this case first log in and if logged in fetch todos for this user </p>\n</li>\n<li>Helped in scaling.This method allowed us to grow the application with ease, without any compromise.</li>\n<li>Better unit testing.In combination with <a href=\"https://github.com/reduxjs/redux-mock-store\">redux-mock-store</a>, we were able to increase confidence by 100% coverage.</li>\n</ol>\n<h2>Conclusion</h2>\n<p>I hope this helps in making the decision when you use redux in your application with typescript.\nOr atleast give you an insight on the ducks proposal.</p>\n<blockquote>\n<p>Also redux toolkit now has a <code class=\"language-text\">createSlice</code> which I think kinda does a similar thing. You can read more about it <a href=\"https://redux.js.org/tutorials/essentials/part-2-app-structure#creating-slice-reducers-and-actions\">here</a></p>\n</blockquote>","frontmatter":{"title":"Redux with ducks","subTitle":"Structuring redux app for scalability","tags":["redux","reactjs","typescript"]}}},"pageContext":{"slug":"/reduxDucks/"}},"staticQueryHashes":["3649515864","3649515864","4202924991","4202924991"]}